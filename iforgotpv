#!/bin/bash

# Function to display help
show_help() {
    echo "Usage: ./iforgotpv <pid> [fd] [interval]"
    echo "  pid      : Process ID"
    echo "  fd       : File descriptor (optional)"
    echo "  interval : Update interval in seconds (optional, default: 1)"
    echo
    echo "If only PID is provided, it will list file descriptors and exit."
    echo "If no arguments are given, this help message is displayed."
}

# Function to list file descriptors
list_file_descriptors() {
    local pid=$1
    echo "File descriptors for PID $pid:"
    ls -l /proc/$pid/fd 2>/dev/null | awk '{print $9 " -> " $11}' || echo "Error: Unable to access file descriptors for PID $pid"
}

# Check arguments
if [ $# -eq 0 ]; then
    show_help
    exit 0
elif [ $# -eq 1 ]; then
    list_file_descriptors $1
    exit 0
fi

# Parse arguments
PID=$1
FD=$2
INTERVAL=${3:-1}

# Function to check if process is still running
check_process() {
    if ! kill -0 $PID 2>/dev/null; then
        echo
        echo "Process $PID has finished. End time: $(date '+%Y-%m-%d %H:%M:%S')"
        exit 0
    fi
}

# Resolve the symbolic link to get the actual file path
FILE_PATH=$(readlink /proc/$PID/fd/$FD 2>/dev/null)
if [ -z "$FILE_PATH" ]; then
    echo "Error: Unable to resolve file path for PID $PID and FD $FD"
    exit 1
fi

# Get the total file size in bytes
FILE_SIZE=$(stat -c %s "$FILE_PATH" 2>/dev/null)
if [ -z "$FILE_SIZE" ]; then
    echo "Error: Unable to get file size for $FILE_PATH"
    exit 1
fi

# Initialize variables
PREV_POS=$(awk '/pos/ {print $2}' /proc/$PID/fdinfo/$FD 2>/dev/null)
if [ -z "$PREV_POS" ]; then
    echo "Error: Unable to get initial position for PID $PID and FD $FD"
    exit 1
fi

WEIGHTED_SPEED=0
ALPHA=0.2  # Weight for the moving average

# Function to format bytes to human-readable format
format_bytes() {
    local bytes=$1
    local units=("B" "KB" "MB" "GB" "TB")
    local unit=0
    local value=$bytes

    while (( $(echo "$value > 1024" | bc -l) )); do
        value=$(echo "scale=2; $value / 1024" | bc)
        ((unit++))
    done

    printf "%.2f %s" $value "${units[$unit]}"
}

# Record start time
START_TIME=$(date '+%Y-%m-%d %H:%M:%S')
echo "Start time: $START_TIME"

# Start the continuous loop
while true
do
    # Check if the process is still running
    check_process

    # Get the current position
    CURRENT_POS=$(awk '/pos/ {print $2}' /proc/$PID/fdinfo/$FD 2>/dev/null)
    if [ -z "$CURRENT_POS" ]; then
        echo "Error: Unable to get current position for PID $PID and FD $FD"
        exit 1
    fi

    # Calculate the change in position since the last check
    CHANGE=$(( CURRENT_POS - PREV_POS ))

    # Calculate the current distance from the end of the file
    DISTANCE=$(( FILE_SIZE - CURRENT_POS ))

    # Calculate the percentage complete
    PERCENT_COMPLETE=$(echo "scale=2; ($CURRENT_POS / $FILE_SIZE) * 100" | bc)

    # Update weighted average speed
    CURRENT_SPEED=$((CHANGE / INTERVAL))
    WEIGHTED_SPEED=$(echo "scale=2; ($ALPHA * $CURRENT_SPEED) + ((1 - $ALPHA) * $WEIGHTED_SPEED)" | bc)

    # Calculate the estimated time to finish in seconds
    if [[ $(echo "$WEIGHTED_SPEED > 0" | bc -l) -eq 1 ]]; then
        TIME_TO_FINISH_SEC=$(echo "scale=0; $DISTANCE / $WEIGHTED_SPEED" | bc)
        FORMATTED_TIME=$(date -u -d @${TIME_TO_FINISH_SEC} +"%H:%M:%S")
    else
        FORMATTED_TIME="--:--:--"
    fi

    # Format current position and total size
    FORMATTED_POS=$(format_bytes $CURRENT_POS)
    FORMATTED_SIZE=$(format_bytes $FILE_SIZE)

    # Calculate transfer rate
    TRANSFER_RATE=$(format_bytes $WEIGHTED_SPEED)

    # Output the progress
    printf "\r[%3.0f%%] %s / %s | %s/s | ETA: %s " \
           $PERCENT_COMPLETE "$FORMATTED_POS" "$FORMATTED_SIZE" "$TRANSFER_RATE" "$FORMATTED_TIME"

    # Update the previous position
    PREV_POS=$CURRENT_POS

    # Pause for the specified interval
    sleep $INTERVAL
done
